stages:
  - build
  - test
  # - deploy

variables:
  APPLICATION_NAME: user-manager
  CONTAINER_IMAGE: ${DOCKER_HUB_USERNAME}/${APPLICATION_NAME}
  CONTAINER_IMAGE_TEST: ${CONTAINER_IMAGE}:test
  CONTAINER_IMAGE_LATEST: ${CONTAINER_IMAGE}:latest
  CONTAINER_IMAGE_TAGGED: ${CONTAINER_IMAGE}:${CI_COMMIT_SHORT_SHA}
  TEST_NETWORK: tdd
  TEST_DB: tdd-db
  TEST_DB_USERNAME: neo4j
  TEST_DB_PASSWORD: neo4j
  K8S_INGRESS_DOMAIN: api.users.maximemoreillon.com

# Needed for Docker in docker build
services:
  - name: docker:19.03.12-dind

build:
  stage: build
  tags:
    - dind
  before_script:
    # Docker hub login
    - echo "${DOCKER_HUB_PASSWORD}" | docker login --username ${DOCKER_HUB_USERNAME} --password-stdin
  script:
    - docker build -t ${CONTAINER_IMAGE_TEST} .
    - docker push ${CONTAINER_IMAGE_TEST}

test:
  stage: test
  tags:
    - dind
  before_script:
    # Creating network for TDD
    - docker network create ${TEST_NETWORK}
    # Creating DB container in network
    - >
      docker run
      -d
      --rm
      --name ${TEST_DB}
      --network ${TEST_NETWORK}
      --hostname ${TEST_DB}
      --env NEO4J_AUTH=none
      neo4j:3.5-community
    - sleep 100 # Wait for Neo4J to become available
  script:
    # Run tests
    - >
      docker run
      --rm
      --name tdd-app
      --network ${TEST_NETWORK}
      -e NEO4J_URL=bolt://${TEST_DB}:7687
      -e NEO4J_USERNAME=${TEST_DB_USERNAME}
      -e NEO4J_PASSWORD=${TEST_DB_PASSWORD}
      -e JWT_SECRET=keyboardcat
      ${CONTAINER_IMAGE_TEST}
      npm run coverage
    # Tagging
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_TAGGED}
    - docker tag ${CONTAINER_IMAGE_TEST} ${CONTAINER_IMAGE_LATEST}
    # Pushing
    - docker push ${CONTAINER_IMAGE_TAGGED}
    - docker push ${CONTAINER_IMAGE_LATEST}





# deployment:
#   stage: deploy
#   tags:
#     - moreillon
#   script:
#     - envsubst < kubernetes_manifest.yml | kubectl apply -f -
#   environment:
#     name: production
#     kubernetes:
#       namespace: ${KUBERNETES_NAMESPACE}
